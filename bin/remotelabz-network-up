#!/usr/bin/env php
<?php

use Symfony\Component\Process\Process;
use Remotelabz\NetworkBundle\Entity\Network;
use Remotelabz\NetworkBundle\Entity\IP;
use App\Bridge\Network\IPTools;
use App\Bridge\Network\IPTables\IPTables;
use App\Bridge\Network\IPTables\Rule;


require dirname(__DIR__).'/config/bootstrap.php';

# Configure the data network to exchange between the front and the back

/*$cmd = ['ip','addr','replace'];

if ( array_key_exists('BRIDGE_INT_IP_ADDRESS', $_ENV)
    && array_key_exists('BRIDGE_INT', $_ENV)
    ) {
    $cmd[]=$_ENV['BRIDGE_INT_IP_ADDRESS'];
    $cmd[]='dev';
    $cmd[]=$_ENV['BRIDGE_INT'];
}

$process = new Process($cmd);
$process->setTimeout(null);

$process->run(function ($type, $buffer) {
    echo $buffer;
});
*/
$cmd = ['ip','link','set', 'up', 'dev'];

if ( array_key_exists('DATA_INTERFACE', $_ENV) ) {
    $cmd[]=$_ENV['DATA_INTERFACE'];
}

$process = new Process($cmd);
$process->setTimeout(null);

$process->run(function ($type, $buffer) {
    echo $buffer;
});

/*$cmd = ['ip','link','set', 'up', 'dev'];

if ( array_key_exists('BRIDGE_INT', $_ENV)
    ) {
    $cmd[]=$_ENV['BRIDGE_INT'];
}

$process = new Process($cmd);
$process->setTimeout(null);

$process->run(function ($type, $buffer) {
    echo $buffer;
});

$cmd = ['ovs-vsctl','--may-exist','add-port'];

if ( array_key_exists('DATA_INTERFACE', $_ENV)
    && array_key_exists('BRIDGE_INT', $_ENV)
    ) {
    $cmd[]=$_ENV['BRIDGE_INT'];
    $cmd[]=$_ENV['DATA_INTERFACE'];
}

$process = new Process($cmd);
$process->setTimeout(null);

$process->run(function ($type, $buffer) {
    echo $buffer;
});
*/

# Configure route back to VPN

$cmd = ['ip','route','add'];

if ( array_key_exists('VPN_CONCENTRATOR_IP', $_ENV)) {
    if ( array_key_exists('VPN_NETWORK', $_ENV) && ($_ENV['VPN_CONCENTRATOR_IP']!= "127.0.0.1") ) {
        echo "Configuration of route to VPN users\n";
        echo "Configuration of route to ".$_ENV['VPN_NETWORK']." ".$_ENV['VPN_NETWORK_NETMASK']." via ".$_ENV['VPN_CONCENTRATOR_IP']."\n";
        $base_ip = new IP($_ENV['VPN_NETWORK']);
        $vpn_network = new Network($base_ip, $_ENV['VPN_NETWORK_NETMASK']);
        $cmd[]=$vpn_network->__toString();
        $cmd[]='via';
        $cmd[]=$_ENV['VPN_CONCENTRATOR_IP'];
        
        $process = new Process($cmd);
        $process->setTimeout(null);
        $process->run(function ($type, $buffer) {
        echo $buffer;
        });
    }

    if ( array_key_exists('VPN_NETWORK', $_ENV)) {
        echo "Configuration of iptables to allow forward to VPN users\n";
        echo "Forward from and to network ".$_ENV['VPN_NETWORK']." ".$_ENV['VPN_NETWORK_NETMASK']." is allowed\n";
        $base_ip = new IP($_ENV['VPN_NETWORK']);
        $vpn_network = new Network($base_ip, $_ENV['VPN_NETWORK_NETMASK']);
        $rule=Rule::create()
            ->setSource($vpn_network->__toString())
            ->setJump('ACCEPT');
        
        if (!IPTables::exists(IPTABLES::CHAIN_FORWARD,$rule)) {
            IPTables::append(
                IPTABLES::CHAIN_FORWARD,
                $rule
            );
        }

        $rule=Rule::create()
            ->setDestination($vpn_network->__toString())
            ->setJump('ACCEPT');
        
        if (!IPTables::exists(IPTABLES::CHAIN_FORWARD,$rule)) {
            IPTables::append(
                IPTABLES::CHAIN_FORWARD,
                $rule
            );
        }
    }
}


# Configure iptables to NAT all lab (temporary because Internet connexion, on the fly, is not yet implemented)
## Flush all nat rules
$cmd = ['iptables','-t','nat','-F'];
$process = new Process($cmd);
$process->setTimeout(null);

$process->run(function ($type, $buffer) {
    echo $buffer;
});

$cmd = ['iptables','-t','nat','-A','POSTROUTING','-o'];

if ( array_key_exists('INTERNET_INTERFACE_ACCESS', $_ENV) && array_key_exists('LAB_NETWORK', $_ENV) ) {
    $cmd[]=$_ENV['INTERNET_INTERFACE_ACCESS'];
    $cmd[]='-s';
    $cmd[]=$_ENV['LAB_NETWORK'];
    $cmd[]='-j';
    $cmd[]='MASQUERADE';
}

$process = new Process($cmd);
$process->setTimeout(null);

$process->run(function ($type, $buffer) {
    echo $buffer;
});


# Configure iptables to DROP all packet in forward to avoid communication between lab
$cmd = ['iptables','-P','FORWARD','DROP'];
$process = new Process($cmd);
$process->setTimeout(null);

$process->run(function ($type, $buffer) {
    echo $buffer;
});



