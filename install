#!/bin/bash

set -e

ENV_FILE=".env"

if [ -f ./${ENV_FILE} ]; then
     source ./${ENV_FILE}
else
     echo "Error: Environment file .env not found in ${ENV_FILE}. Please check this file exists and try again."
     exit 1
fi

function debug() {
  echo "$1"
}

function warning() {
  echo "WARNING: $1"
}

function error() {
  echo "ERROR: $1"
}

function quit_on_error() {
  error $BASH_COMMAND ${BASH_LINENO[0]}
  exit 1
}

trap 'quit_on_error' ERR

debug "Starting remoteLabz-worker installation"

# Check for ubuntu >20.04
if [ ! $(which lsb_release) ] || [ $(lsb_release -is) != "Ubuntu" ] || [ $(lsb_release -rs) != "20.04" ]; then
  error "Your platform is unsupported. Please use Ubuntu Server LTS 20.04."
  exit 1
fi
# Check for root
if [ "$(whoami)" != "root" ]; then
    error "Installation aborted, root is required! Please reload the script as root to continue..."
    exit 1
fi

while getopts "p:" opt; do
  case $opt in
    p)
      export REMOTELABZ_WORKER_PORT="$OPTARG"
      ;;
    \?)
      echo "Invalid option: -$OPTARG" >&2
      exit 1
      ;;
    :)
      echo "Option -$OPTARG requires an argument." >&2
      exit 1
      ;;
  esac
done

# Environment variables
if [ -z "$REMOTELABZ_WORKER_PATH" ]; then
    export REMOTELABZ_WORKER_PATH=/opt/remotelabz-worker
fi
if [ -z "$REMOTELABZ_WORKER_PORT" ]; then
    export REMOTELABZ_WORKER_PORT=8080
fi
# ----------------------------------
export SCRIPTPATH="$( cd "$(dirname "$0")" ; pwd -P )"
export DEBIAN_FRONTEND=noninteractive
export COMPOSER_ALLOW_SUPERUSER=1
SCRIPT=$(readlink -f "$0")
SCRIPT_DIR=$(dirname "$SCRIPT")

debug "Running apt-get to grab required packages"
apt-get install -y software-properties-common
#add-apt-repository -y ppa:ondrej/php
apt-get update
apt-get install -y ntp apache2 php zip unzip qemu qemu-kvm openvswitch-switch git python3 python3-pip python3-openvswitch php-xml php-curl php-amqp logrotate lxc screen
echo "OK ✔️"

# Create user remotelabz and remotelabz group
if [ ! $(getent passwd remotelabz-worker) ]; then
  echo "Creating remotelabz-worker user"
  useradd -N remotelabz-worker
fi
if [ ! $(getent group remotelabz-worker) ]; then
  echo "Creating remotelabz-worker group"
  groupadd remotelabz-worker
fi

usermod -aG remotelabz-worker www-data
usermod -aG remotelabz-worker remotelabz-worker

chgrp -R remotelabz-worker "${SCRIPTPATH}"
chmod -R g+rwx "${SCRIPTPATH}"

echo "Configure data network"
ovs-vsctl --may-exist add-br "${BRIDGE_INT}"
# TODO: Test if ${DATA_INTERFACE} has an IP to avoid to shutdown the connexion
# If ${DATA_INTERFACE} has an IP address, perhaps it's the actual network interface
# and not a second interface reserved for data of the VMs
ovs-vsctl --may-exist add-port "${BRIDGE_INT}" "${DATA_INTERFACE}"
ip link set up dev "${BRIDGE_INT}"
ip link set up dev "${DATA_INTERFACE}"

echo "IP configuration of the gateway to data network for the VMs"
ip addr add "${BRIDGE_INT_IP_ADDRESS}" dev "${BRIDGE_INT}" || true
echo "OK ✔️"

echo "Adding sudo permissions for remotelabz-worker user"
echo "%remotelabz-worker     ALL = (ALL) NOPASSWD: $(which ip), $(which iptables), $(which ovs-vsctl), $(which systemctl) start remotelabz*, $(which systemctl) stop remotelabz*, $(which systemctl) restart remotelabz*, $(which systemctl) status remotelabz*" | sudo tee /etc/sudoers.d/remotelabz-worker
echo "OK ✔️"

# Composer
echo "Installing Composer"
if ! [ $(command -v composer) ]; then
    cp composer.phar /usr/local/bin/composer
    echo "OK ✔️"
else
  echo "Composer is already installed! Skipping."
fi

echo "Downloading Composer packages"
(cd "${SCRIPTPATH}" && composer install --no-progress --no-suggest)
chown -R remotelabz-worker:remotelabz-worker "${SCRIPTPATH}"/vendor
chmod -R 777 "${SCRIPTPATH}"/vendor
echo "OK ✔️"

# Folders
debug "Creating images folder if it does not exists already..."
ln -fs "${SCRIPTPATH}" "${REMOTELABZ_WORKER_PATH}"
mkdir -p "${REMOTELABZ_WORKER_PATH}/images"
chmod g+rwx "${REMOTELABZ_WORKER_PATH}/images"
mkdir -p "${REMOTELABZ_WORKER_PATH}/instances"
chmod g+rwx "${REMOTELABZ_WORKER_PATH}/instances"

# Websockify
echo "Installing WebSockify"
if ! [ $(command -v websockify) ]; then
    debug "Installing WebSockify..."
    pip3 install setuptools
    git clone https://github.com/novnc/websockify.git "${REMOTELABZ_WORKER_PATH}/websockify"
    (cd "${REMOTELABZ_WORKER_PATH}/websockify" && python3 setup.py install)
    rm -rf "${REMOTELABZ_WORKER_PATH}/websockify"
    echo "OK ✔️"
else
  echo "WebSockify is already installed! Skipping."
fi

# Grant OVS permissions to remotelabz group
chmod g+rwx /var/run/openvswitch/db.sock
chgrp remotelabz-worker /var/run/openvswitch/db.sock

# Configure apache
echo "Configuring Apache with port ${REMOTELABZ_WORKER_PORT}"
if grep -Fxq "Listen ${REMOTELABZ_WORKER_PORT}" /etc/apache2/ports.conf; then
  echo "Port ${REMOTELABZ_WORKER_PORT} is already configured in apache2."
else
  echo "Listen ${REMOTELABZ_WORKER_PORT}" >> /etc/apache2/ports.conf
fi
cp -f "${SCRIPTPATH}"/config/apache/100-remotelabz-worker.conf /etc/apache2/sites-available/100-remotelabz-worker.conf
sed -i "s/Listen 8080/Listen ${REMOTELABZ_WORKER_PORT}/g" /etc/apache2/sites-available/100-remotelabz-worker.conf
sed -i 's,/var/www/html/remotelabz-worker,'"${SCRIPTPATH}"',' /etc/apache2/sites-available/100-remotelabz-worker.conf
ln -fs /etc/apache2/sites-available/100-remotelabz-worker.conf /etc/apache2/sites-enabled/100-remotelabz-worker.conf
apache2ctl restart || true
echo "OK ✔️"

#Configure logrotate
echo "Configuring logrotate"
cp -f "${SCRIPTPATH}"/config/logrotate/remotelabz-worker /etc/logrotate.d
echo "OK ✔️"

echo "Setup remotelabz service"
ln -fs "${SCRIPTPATH}"/bin/remotelabz-worker.service /etc/systemd/system/remotelabz-worker.service
sudo systemctl enable remotelabz-worker.service
sudo service remotelabz-worker start
systemctl daemon-reload || true
echo "OK ✔️"

echo "Copy .env to .env.local"
cp .env .env.local
echo "OK ✔️"

echo "Create certs directory"
mkdir "${REMOTELABZ_WORKER_PATH}"/config/certs/
chown :remotelabz-worker "${REMOTELABZ_WORKER_PATH}"/config/certs/
chmod g+w "${REMOTELABZ_WORKER_PATH}"/config/certs/
echo "OK ✔️"

echo "Creation of the container to prepare the DHCP service"
lxc-create -t download -n Migration -- -d debian -r bullseye -a amd64 --keyserver hkp://keyserver.ubuntu.com
echo "OK ✔️"

echo "Creation of the container to prepare the DHCP service"
lxc-create -t download -n Debian -- -d debian -r bullseye -a amd64 --keyserver hkp://keyserver.ubuntu.com
echo "Default login : toto password : 1toto;2" >> "/var/lib/lxc/Debian/rootfs/etc/issue"
echo "Default login : root password : 1toor;2" >> "/var/lib/lxc/Debian/rootfs/etc/issue"
echo "OK ✔️"

echo "Creation of a container Ubuntu 20 LTS"
lxc-create -t download -n Ubuntu20LTS -- -d ubuntu -r focal -a amd64 --keyserver hkp://keyserver.ubuntu.com
echo "Default login : toto password : 1toto;2" >> "/var/lib/lxc/Ubuntu20LTS/rootfs/etc/issue"
echo "Default login : root password : 1toor;2" >> "/var/lib/lxc/Ubuntu20LTS/rootfs/etc/issue"
echo "OK ✔️"

echo "Creation of a container Alpine 3.15"
lxc-create -t download -n Alpine3.15 -- -d alpine -r 3.15 -a amd64 --keyserver hkp://keyserver.ubuntu.com
echo "Default login : toto password : 1toto;2" >> "/var/lib/lxc/Alpine3.15/rootfs/etc/issue"
echo "Default login : root password : 1toor;2" >> "/var/lib/lxc/Alpine3.15/rootfs/etc/issue"
echo "OK ✔️"

echo -e "[ \e[32mOK\e[39m ] RemoteLabz-worker is installed and ready to serve neat VMs! Start by editing the \e[32m.env.local\e[39m file then start the worker with \e[32mservice remotelabz-worker start\e[39m."
echo "On your worker, you have now to execute the following task:"
echo "Start the container Migration from the Sandbox menu"
echo "Configure if with the following command :"

echo "Thank you for using our software. ❤️"
exit 0
